What is Property Dependency Injection in C#?

In Property Dependency Injection (DI), we need to supply the dependency object through a public property of the client class.
Let us see an example to understand how we can implement the Property or you can say setter DI in C#.

*When to use Property Dependency Injection over Constructor Injection and vice versa?

The Constructor Dependency Injection in C# is the standard for dependency injection.
It ensures that all the dependency objects are initialized before we are going to invoke any methods or properties of the dependency object.
As a result, it avoids the null reference exceptions.

The Setter/Property Dependency Injection in C# is rarely used in real-time applications.
For example, if I have a class that has several methods but those methods do not depend on any other objects.
Now I need to create a new method within the same class but that new method now depends on another object.
If we use the constructor dependency injection here, then we need to change all the existing constructor calls where we created this class object.
This can be a very difficult task if the project is a big one.
Hence, in such scenarios, the Setter or Property Dependency Injection can be a good choice.